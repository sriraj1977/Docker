(stateless applications don't “store” data whereas stateful applications require backing storage)
(Persistent data is data that is stored on a persistent (long-lasting) storage medium so that it can be retained for long-term use.)

What Is Docker Compose And How Does It Work?

Docker Compose is a software containerized tool developed to orchestrate the definitions and running of multi-container docker applications using single commands. It reads the definitions of the multiple containers from the single Configuration Yaml file and performs the orchestration with single-line commands making easy usage for developers.

Bind Mounts vs. Docker Volumes
When you use a bind mount, a file or directory on the host machine is mounted from the host into a container. By contrast, when you use a volume, a new directory is created within Docker's storage directory on the host machine, and Docker manages that directory's contents.

Typical volume use cases include the following:
Database storage,Essential caches,Share data between containers,Write to remote filesystems and
Application data – Data generated by your application, such as file uploads, documents, and profile photos, should be stored in a volume.
Eg:Multiple Docker Containers are created when working on a micro-service architecture using Docker containers in order to build and test various application components. Now, sharing files and folders may be necessary for some of those components. The Image size may be unnecessarily increased if the same files are copied into each Container separately. 

Additionally, editing a file in one Container may not automatically modify the same file in the other Containers.
For the purpose of persisting data created or updated by the containers, volumes are directories or files that are present on the host disc and mounted to the containers. They are kept in the area of the host filesystem that Docker manages exclusively, and non-Docker processes shouldn't alter that area. Because they deliver effective performance and are segregated from the other functionalities of the Docker host, volumes are the most popular method of storing container data.

Docker Volumes:

Volumes allow for persistent data storage that persists even if the container is removed.
The written data will still be available if the container stops – as the volume’s stored separately on your host, it can be remounted to another container
What Are Docker Volumes?
Volumes are a mechanism for storing data outside containers. All volumes are managed by Docker and stored in a dedicated directory on your host, usually /var/lib/docker/volumes for Linux systems.

Create a Volume command: docker volume create my_volume
Mount the Volume to a Container: docker run -d -v my_volume:/app my_image
Make Changes Inside the Container: Access the running container using docker exec -it <container_id> /bin/bash or similar commands. Then, make changes to files or directories within the mounted volume.
Verify Persistence: Exit the container and start another instance using the same volume. Verify that the changes made in the previous container are persisted. For example:
docker run -d -v my_volume:/app my_image
